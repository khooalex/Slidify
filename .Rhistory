t.test(len~supp, ToothGrowth)
t.test(len~dose, ToothGrowth)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(e1071)
trainNPC <- training[,58:69]
fitnpc<- train(training$diagnosis ~ ., method="glm", data=trainNPC)
testNPC<-testing[,58:69]
confusionMatrix(testing$diagnosis, predict(fitnpc,testNPC))
preProc <- preProcess(training[,58:69],method= "pca", thresh=0.80)
install.packages("e1071")
library(e1071)
trainNPC <- training[,58:69]
fitnpc<- train(training$diagnosis ~ ., method="glm", data=trainNPC)
testNPC<-testing[,58:69]
confusionMatrix(testing$diagnosis, predict(fitnpc,testNPC))
preProc <- preProcess(training[,58:69],method= "pca", thresh=0.80)
summary(preProc)
preProc
lenOJ_0.5 <- ToothGrowth$len[ToothGrowth$supp=="OJ"&ToothGrowth$dose==0.5]
lenVC_0.5 <- ToothGrowth$len[ToothGrowth$supp=="VC"&ToothGrowth$dose==0.5]
lenOJ_1.0 <- ToothGrowth$len[ToothGrowth$supp=="OJ"&ToothGrowth$dose==1.0]
lenVC_1.0 <- ToothGrowth$len[ToothGrowth$supp=="VC"&ToothGrowth$dose==1.0]
lenOJ_2.0 <- ToothGrowth$len[ToothGrowth$supp=="OJ"&ToothGrowth$dose==2.0]
lenVC_2.0 <- ToothGrowth$len[ToothGrowth$supp=="VC"&ToothGrowth$dose==2.0]
var(lenOJ_0.5)
var(lenVC_0.5)
var(lenOJ_1.0)
var(lenVC_1.0)
var(lenOJ_2.0)
var(lenVC_2.0)
t.test(lenOJ_1.0, lenOJ_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenOJ_2.0, lenOJ_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_0.5, lenOJ_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_1.0, lenOJ_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_2.0, lenOJ_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenOJ_2.0, lenOJ_1.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_0.5, lenOJ_1.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_1.0, lenOJ_1.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_2.0, lenOJ_1.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_0.5, lenOJ_2.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_1.0, lenOJ_2.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_2.0, lenOJ_2.0, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_1.0, lenVC_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_2.0, lenVC_0.5, paired = FALSE, var.equal = FALSE)$conf
t.test(lenVC_2.0, lenVC_1.0, paired = FALSE, var.equal = FALSE)$conf
qt(8,0.975)
qt(0.975,8)
sigma<-sqrt(1.5^2/9+1.8^2/9)
pt((-3-1)/sigma,16)
sigma
sigma<-sqrt(1.5^2/9+1.8^2/9)
pt((-3-1)/sigma,16)
sigma
? t.test
x<-()
X<-(140,138, 150,148,135)
Y<-(132,135,151,146,130)
X<-(140 138  150 148 135)
Y<-(132 135 151 146 130)
x<-(140,138,150,148,135)
x<-(140,)
X<-c(140,138,150,148,135)
Y<-c(132,135,151,146,130)
var(X)
var(Y)
t.test(X,Y, alternative="two.sided", paired=T, var.equeal=F, conf.level=0.95)
t.test(X,Y, alternative="two.sided", paired=T, var.equeal=F, conf.level=0.9725)
t.test(X,Y, alternative="two.sided", paired=T)
?pq
?Qp
sigma<-sqrt(0.99*0.01/1787)
z<-(1/100-10/1787)/sigma
1-pnorm(z)
rnorm(10)
X = c(1:10); Y=round(10*rnorm(10),1)
x
X
Y
X = c(1:10); Y=round(10*rnorm(10),0); Z=10*round(unif(10),1)
Z=10*round(runif(10),1)
Z
library(rgl)
X = c(1:10); Y=round(10*rnorm(10),0); Z=10*round(runif(10),1)
plot3d(X, Y, Z, col=rainbow(1000))
install.packages("rgl")
library(rgl)
X = c(1:10); Y=round(10*rnorm(10),0); Z=10*round(runif(10),1)
plot3d(X, Y, Z, col=rainbow(1000))
X = c(1:20); Y=10*round(runif(20),1); Z=10*round(runif(20),1)
plot3d(X, Y, Z, col=rainbow(1000))
library(quadprog)
library(e1071)
?svm
X<- (1,0;0,1;0,-1;-1,0;0,2;0,-2;-2,0)
Y<-(-1,-1,-1,1,1,1,1)
x<-(1,0;0,1)
X<-c(1,0;0,1;0,-1;-1,0;0,2;0,-2;-2,0)
Y<-c(-1,-1,-1,1,1,1,1)
Y
X
X<-matrix(c(1,0,0,1,0,-1,-1,0,0,2,0,-2,-2,0),2,7)
X
m <- svm(X,Y)
X<-matrix(c(1,0,0,1,0,-1,-1,0,0,2,0,-2,-2,0),7,2)
Y<-c(-1,-1,-1,1,1,1,1)
m<-svm(X,Y)
m
m<-svm(X,Y,"C")
M<-svm(X,Y, type= "C")
M
plot(M)
summary(M)
M$formula
M$coefs
M
M$kernel
print(M)
plot.svm(M)
plot(M,X)
plot(M,X,Y~X)
data(X,Y)
X
Y
plot(M,data.frame(X,Y))
data.frame(x,Y)
data.frame(X,Y)
plot(M,data.frame(X))
plot(M,data.frame(X=X,Y=Y))
plot(M,x=data.frame(X))
plot(M,x=data.frame(X),y=data.frame(Y))
plot(M,x=data.frame(X,Y))
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(X, y= Y)
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(X, y= Y)
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
q
quit()
library(e1071)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(X, y= Y)
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(X, y= as,factor(Y))
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(x=X, y= as,factor(Y))
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(x=X, y= as.factor(Y))
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(X, y= as.factor(Y))
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(X, y=Y)
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(x=X, y=as.factor(Y))
#as.factor不放会报错，x=X或X结果一样
M<-svm(y~.,data=dat, type= "C")
plot(M,dat)
library(e1071)
?svm
library(e1071)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
#注意X中元素的排列顺序
Y<-c(-1,-1,-1,1,1,1,1)
dat<-data.frame(x=X, y=as.factor(Y))
M1<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2)
Plot(M1,dat)
plot(M1,dat)
M1<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2, gamma=1)
plot(M1,dat)
?svm
?M1$SV
M1$SV
M1$sigma
str(M1)
M1.formula
svm.formula
?svm.formula
M1<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2, gamma=1,coef0=1)
plot(M1,dat)
M1$coefs
str(M1)
M1$decision.value
sum(M1$decision.value)
M1$terms
M2<-svm(X,as.factor(Y), type= "C",kernel= "polynomial", degree=2, gamma=1,coef0=1)
Plot(M2,dat)
plot(M2,dat)
str(M2)
?svm
plot(M2,data.frame(X,y=as.factor(Y))
)
plot(M2,data.frame(x=X,y=as.factor(Y)))
plot(M2,dat1=data.frame(x=X,y=as.factor(Y)))
plot(M2,data=data.frame(x=X,y=as.factor(Y)))
plot(M2,data=data.frame(X))
? plot.svm
plot(M2,data=data.frame(y=as.factor(Y),X=X))
plot(M2,data=data.frame(X,as,factor(Y)))
plot(M2,data=data.frame(X,as.factor(Y)))
plot(M2,dat)
plot(M2,X)
plot(M2,X,as.factor(Y))
str(M1)
?rho
??rho
plot(M1,dat)
?svm
str(M)
M<-svm(y~.,data=dat, type= "C")
str(M)
library(quadprog)
library(e1071)
library(quadprog)
?svm
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(rCharts)
require(rCharts)
install.packages("shiny")
M1<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2, gamma=1,coef0=1)
plot(M1,dat)
library(e1701)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
Y<-c(-1,-1,-1,1,1,1,1)
Modelsvm<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2, gamma=1,coef0=1)
plot(Modelsvm,dat)
install.packages("e1701")
library(e1071)
X<-matrix(c(1,0,0,-1,0,0,-2,0,1,-1,0,2,-2,0),7,2)
Y<-c(-1,-1,-1,1,1,1,1)
Modelsvm<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2, gamma=1,coef0=1)
plot(Modelsvm,dat)
dat<-data.frame(x=X, y=as.factor(Y))
Modelsvm<-svm(y~.,data=dat, type= "C",kernel= "polynomial", degree=2, gamma=1,coef0=1)
plot(Modelsvm,dat)
str(Modelsvm)
Modelsvm$SV
Modelsvm$coefs
Modelsvm$decision.values
install.packages("rcharts")
install.packages("rCharts")
install.packages("rChart")
install.packages("rchart")
install.packages("devtools")
install_github('slidify','ramnathv')
library(devtools)
install.packages("Rtools")
install.packages("Rcharts")
install.packages("RCharts")
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
output: html_document
---
```{r echo=TRUE}
install.packages("randomForest")
install.packages("gbm")
? dgamma
? lm
?show
?colSums
?plot
?lm
?show
?dgamma
getmethod()
getMethod()
getMethod(lm)
getMethod("lm")
getMethod("show")
showMethods()
showMethods("show")
getMethod("show")
getMethod("show","default")
x=rnorm(10)
x
y=10+runif(10)
M<-lm(y~x-1)
plot(M)
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
plot(M1)
x=rnorm(10)
y=10+runif(10)
M<-lm(y~x-1)
plot(x,y)
abline(M,col="red")
abline(M,col="orange")
summary(M)
plot(y~x)
abline(M,col="red")
x=rnorm(10)
y=10+runif(10)
plot(y~x)
M<-lm(y~x-1)
abline(M,col="red")
x=rnorm(10)
y=10+runif(10)
plot(x,y)
M<-lm(y~x)
abline(M,col="red")
x=rnorm(10)
y=1+runif(10)
plot(x,y)
M<-lm(y~x-1)
abline(M,col="red")
summary(M)
plot(x,y)
M<-lm(y~x)
abline(M,col="red")
summary(M)
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
M2<-lm(Y1~X1)
summary(M1)
summary(M2)
x=c(1:10)
y=1+runif(10)+x
plot(y-mean(y), x-mean(x))
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
plot(Y1,X1, col= "blue")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
M2<-lm(Y1~X1)
abline(M1,col= "green")
plot(y-mean(y), x-mean(x))
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
point(Y1,X1, col= "blue")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
M2<-lm(Y1~X1)
abline(M1,col= "green")
?points
plot(y-mean(y), x-mean(x))
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
points(Y1,X1, col= "blue")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
M2<-lm(Y1~X1)
abline(M2,col= "green")
plot(y-mean(y), x-mean(x), col=”orange”)
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
points(Y1,X1, col= "blue")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
M2<-lm(Y1~X1)
abline(M2,col= "green")
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
points(Y1,X1, col= "blue")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
M2<-lm(Y1~X1)
abline(M2,col= "green")
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
points(Y1,X1, col= "blue")
X1 <- (x - mean(x))
Y1 <- (y - mean(y))
M2<-lm(Y1~X1)
abline(M2,col= "green")
summary(M1)
summary(M2)
x=c(1:10)
y=1+runif(10)+x
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
points(Y1,X1, col= "blue")
X1 <- (x - mean(x))
Y1 <- (y - mean(y))
M2<-lm(Y1~X1)
abline(M2,col= "green")
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
X1 <- (x - mean(x))
Y1 <- (y - mean(y))
points(Y1,X1, col= "blue")
M2<-lm(Y1~X1)
abline(M2,col= "green")
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
points(Y1,X1, col= "blue")
M2<-lm(Y1~X1)
abline(M2,col= "green")
x=c(1:10)
y=1+3*runif(10)+x
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
X1 <- (x - mean(x))/sd(x)
Y1 <- (y - mean(y))/sd(y)
points(Y1,X1, col= "blue")
M2<-lm(Y1~X1)
abline(M2,col= "green")
plot(y-mean(y), x-mean(x), col="orange")
M1<-lm(I(y - mean(y)) ~ I(x-mean(x))  -1 )
abline(M1,col= "red")
X1 <- (x - mean(x))
Y1 <- (y - mean(y))
points(Y1,X1, col= "blue")
M2<-lm(Y1~X1)
abline(M2,col= "green")
# make up some data
x <- seq(0,10,1)
y <- 3 + 0.5*x + rnorm(length(x), mean=0, sd=0.25)
# plot the points
plot(x,y, xlim = c(0,10), ylim=c(0,10))
# fit using intercept only
abline(h=mean(y), lty=2)
# fit using slope only (goes through origin by definition)
abline(lm(y~x-1), lty=4)
# fit using slope and intercept
abline(lm(y~x), lwd=2)
setwd("F:/coursera/John Hopkins Data Science/DevelopingDataProducts/Shiny/")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("F:/coursera/John Hopkins Data Science/DevelopingDataProducts/Slidify")
slidify("index.Rmd")
library(slidify)
install.packages(slidify)
library("devtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
publish(user = "helengyy", repo = "https://github.com/helengyy/Slidify")
publish(user = "helengyy", repo = "Slidify")
publish(user = "helengyy", repo = "Slidify")
publish(user = "helengyy", repo = "Slidify")
publish(user = "helengyy", repo = "Slidify")
publish(user = "helengyy", repo = "http://helengyy.github.io/Slidify")
publish(user = "helengyy", repo = "Slidify/tree/gh-pages")
publish(user = "helengyy", repo = "Slidify/blob/gh-pages/index.html")
